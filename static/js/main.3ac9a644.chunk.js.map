{"version":3,"sources":["common/addTextToClipboard.ts","components/Editor.tsx","hooks/useDebounced.ts","components/Display.tsx","index.tsx"],"names":["addTextToClipboard","text","navigator","clipboard","writeText","Editor","code","onChange","ref","useRef","useState","width","height","setSize","useEffect","resetSize","current","offsetWidth","offsetHeight","window","addEventListener","removeEventListener","className","name","placeholder","theme","mode","fontSize","showPrintMargin","showGutter","highlightActiveLine","value","useDebounced","target","delay","setValue","timeout","setTimeout","clearTimeout","Display","url","debouncedUrl","title","src","alt","onClick","defaultCode","App","setCode","encodeURIComponent","encodeUrl","listener","e","key","getModifierState","userAgent","indexOf","preventDefault","explanation","useMemo","innerWidth","innerHeight","ReactDOM","render","document","getElementById"],"mappings":"kPAQeA,EAJY,SAACC,GAC1BC,UAAUC,UAAUC,UAAUH,I,iBC2CjBI,G,YAxCV,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACNC,EAAMC,iBAAuB,MADR,EAEUC,mBAAS,CAC5CC,MAAO,EACPC,OAAQ,IAJiB,0BAElBD,EAFkB,EAElBA,MAAOC,EAFW,EAEXA,OAAUC,EAFC,KAoB3B,OAbAC,qBAAU,WACR,IAAMC,EAAY,WAChB,GAAIP,EAAIQ,QAAS,CACf,IAAML,EAAQH,EAAIQ,QAAQC,YACpBL,EAASJ,EAAIQ,QAAQE,aAC3BL,EAAQ,CAAEF,QAAOC,aAKrB,OAFAG,IACAI,OAAOC,iBAAiB,SAAUL,GAC3B,kBAAMI,OAAOE,oBAAoB,SAAUN,MACjD,CAACP,IAGF,yBAAKA,IAAKA,EAAKc,UAAU,UACvB,kBAAC,IAAD,CACEC,KAAK,cACLC,YAAY,gCACZC,MAAM,SACNC,KAAK,QACLnB,SAAUA,EACVoB,SAAU,GACVC,iBAAiB,EACjBC,YAAY,EACZC,qBAAqB,EACrBC,MAAOzB,EACPK,MAAK,UAAKA,EAAQ,GAAb,MACLC,OAAM,UAAKA,EAAS,GAAd,WCzBCoB,EAfM,SAAYC,GAA4B,IAAjBC,EAAgB,uDAAR,IAAQ,EAChCxB,mBAAYuB,GADoB,mBACnDF,EADmD,KAC5CI,EAD4C,KAY1D,OATArB,qBAAU,WACR,IAAMsB,EAAUC,YAAW,WACzBF,EAASF,KACRC,GACH,OAAO,WACLI,aAAaF,MAEd,CAACH,EAAQC,IAELH,GCaMQ,G,MAlB4B,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACtCC,EAAeT,EAAaQ,GAElC,OACE,yBAAKlB,UAAU,WACb,yBACEoB,MAAM,wBACNC,IAAKF,EACLG,IAAI,iBACJC,QAAS,WAEP7C,EAAmByC,SCbvBK,G,MAAW,2GAgBXC,EAAgB,WAAM,MAEFrC,mBAASoC,GAFP,mBAEnBxC,EAFmB,KAEb0C,EAFa,KAGpBR,EARU,SAAClC,GAEjB,MADgB,yDACC2C,mBAAmB3C,GAMxB4C,CAAU5C,GAAQwC,GAE9BhC,qBAAU,WACR,IAAMqC,EAAW,SAACC,GAEJ,MAAVA,EAAEC,KACFD,EAAEE,kBAC6C,IAA7CpD,UAAUqD,UAAUC,QAAQ,YAAqB,OAAS,aAG5DJ,EAAEK,iBACFzD,EAAmBwC,KAIvB,OADArB,OAAOC,iBAAiB,UAAW+B,GAC5B,WACLhC,OAAOE,oBAAoB,UAAW8B,MAEvC,CAACX,IAEJ,IAAMkB,EAAcC,mBAAQ,WAC1B,GAAIxC,OAAOyC,YAAc,KAAOzC,OAAO0C,aAAe,IACpD,OAAO,yFAEP,IAAMR,GACyC,IAA7CnD,UAAUqD,UAAUC,QAAQ,YAAqB,UAAY,OAC/D,OACE,wCACW,6BAAMH,GADjB,MAC8B,kCAD9B,wEAMH,IAEH,OACE,yBAAK/B,UAAU,OACb,2CACCoC,EACD,kBAAC,EAAD,CACEpD,KAAMA,EACNC,SAAU,SAAAwB,GACRiB,EAAQjB,MAGZ,kBAAC,EAAD,CAASS,IAAKA,MAKpBsB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.3ac9a644.chunk.js","sourcesContent":["/**\n *\n * @param text the text to add to the user's clipboard.\n */\nconst addTextToClipboard = (text: string) => {\n  navigator.clipboard.writeText(text)\n}\n\nexport default addTextToClipboard\n","import React, { useRef, useEffect, useState } from 'react'\nimport AceEditor from 'react-ace'\nimport 'ace-builds/src-noconflict/mode-latex'\nimport 'ace-builds/src-noconflict/theme-github'\n\nconst Editor: React.FC<{\n  code?: string\n  onChange?: (value: string, event?: any) => void\n}> = ({ code, onChange }) => {\n  const ref = useRef<HTMLDivElement>(null)\n  const [{ width, height }, setSize] = useState({\n    width: 0,\n    height: 0\n  })\n\n  useEffect(() => {\n    const resetSize = () => {\n      if (ref.current) {\n        const width = ref.current.offsetWidth\n        const height = ref.current.offsetHeight\n        setSize({ width, height })\n      }\n    }\n    resetSize()\n    window.addEventListener('resize', resetSize)\n    return () => window.removeEventListener('resize', resetSize)\n  }, [ref])\n\n  return (\n    <div ref={ref} className=\"Editor\">\n      <AceEditor\n        name=\"latex-input\"\n        placeholder=\"Enter LaTeX math code here...\"\n        theme=\"github\"\n        mode=\"latex\"\n        onChange={onChange}\n        fontSize={14}\n        showPrintMargin={false}\n        showGutter={false}\n        highlightActiveLine={false}\n        value={code}\n        width={`${width - 20}px`}\n        height={`${height - 20}px`}\n      />\n    </div>\n  )\n}\n\nexport default Editor\n","import { useState, useEffect } from 'react'\n\nconst useDebounced = function<T>(target: T, delay = 500): T {\n  const [value, setValue] = useState<T>(target)\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setValue(target)\n    }, delay)\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [target, delay])\n\n  return value\n}\n\nexport default useDebounced\n","import React from 'react'\nimport useDebounced from '../hooks/useDebounced'\nimport addTextToClipboard from '../common/addTextToClipboard'\nimport './Display.css'\n\n/**\n * When given LaTeX math code, will fetch the rendered image from github's API\n * and display it.\n */\nconst Display: React.FC<{ url: string }> = ({ url }) => {\n  const debouncedUrl = useDebounced(url)\n\n  return (\n    <div className=\"Display\">\n      <img\n        title=\"Copy url to clipboard\"\n        src={debouncedUrl}\n        alt=\"Rendered LaTeX\"\n        onClick={() => {\n          // console.log(`I want to add ${url} to your keyboard.`)\n          addTextToClipboard(debouncedUrl)\n        }}\n      />\n    </div>\n  )\n}\n\nexport default Display\n","import React, { useState, useEffect, useMemo } from 'react'\nimport ReactDOM from 'react-dom'\nimport addTextToClipboard from './common/addTextToClipboard'\nimport LaTeXEditor from './components/Editor'\nimport Display from './components/Display'\nimport './index.css'\n\nconst defaultCode = `\\\\begin{split}\n    2^{n\\\\cdot k} &= (1 + (2^n - 1))^k \\\\\\\\\n    &\\\\equiv 1 \\\\mod 2^n - 1\n\\\\end{split}`\n\n/**\n * Takes raw latex code and encodes it into a url for Github's latex math\n * rendering API.\n *\n * @param code The raw latex code\n */\nconst encodeUrl = (code: string) => {\n  const baseUrl = 'https://render.githubusercontent.com/render/math?math='\n  return baseUrl + encodeURIComponent(code)\n}\n\nconst App: React.FC = () => {\n  // The default code is a simple mathematical fact\n  const [code, setCode] = useState(defaultCode)\n  const url = encodeUrl(code || defaultCode)\n\n  useEffect(() => {\n    const listener = (e: KeyboardEvent) => {\n      if (\n        e.key === 's' &&\n        e.getModifierState(\n          navigator.userAgent.indexOf('Mac OS X') !== -1 ? 'Meta' : 'Control'\n        )\n      ) {\n        e.preventDefault()\n        addTextToClipboard(url)\n      }\n    }\n    window.addEventListener('keydown', listener)\n    return () => {\n      window.removeEventListener('keydown', listener)\n    }\n  }, [url])\n\n  const explanation = useMemo(() => {\n    if (window.innerWidth <= 800 || window.innerHeight <= 600) {\n      return <h3>Click the preview image to add the url to your clipboard.</h3>\n    } else {\n      const key =\n        navigator.userAgent.indexOf('Mac OS X') !== -1 ? 'Command' : 'Ctrl'\n      return (\n        <h3>\n          Pressing <kbd>{key}</kbd> + <kbd>S</kbd> or clicking the preview image\n          will add the url to your clipboard.\n        </h3>\n      )\n    }\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <h1>Github Math</h1>\n      {explanation}\n      <LaTeXEditor\n        code={code}\n        onChange={value => {\n          setCode(value)\n        }}\n      />\n      <Display url={url} />\n    </div>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}