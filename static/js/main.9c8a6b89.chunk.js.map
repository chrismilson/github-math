{"version":3,"sources":["common/addTextToClipboard.ts","components/Editor.tsx","hooks/useDebounced.ts","components/Display/Fallback.tsx","components/Display/index.tsx","hooks/usePersistentState.ts","index.tsx"],"names":["addTextToClipboard","text","navigator","clipboard","writeText","Editor","code","onChange","ref","useRef","useState","width","height","setSize","useEffect","resetSize","current","offsetWidth","offsetHeight","window","addEventListener","removeEventListener","className","name","placeholder","theme","mode","fontSize","showPrintMargin","showGutter","highlightActiveLine","value","useDebounced","target","delay","setValue","timeout","setTimeout","clearTimeout","Fallback","Display","url","error","setError","loading","setLoading","debouncedUrl","useLayoutEffect","title","src","alt","onClick","onError","onLoad","usePersistentState","key","fallbackState","defaultValue","result","localStorage","getItem","JSON","parse","getStorage","state","setState","setItem","stringify","updateStorage","App","setCode","encodeURIComponent","encodeUrl","listener","e","getModifierState","userAgent","indexOf","preventDefault","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9c8a6b89.chunk.js","sourcesContent":["/**\n *\n * @param text the text to add to the user's clipboard.\n */\nconst addTextToClipboard = (text: string) => {\n  navigator.clipboard.writeText(text)\n}\n\nexport default addTextToClipboard\n","import React, { useRef, useEffect, useState } from 'react'\nimport AceEditor from 'react-ace'\nimport 'ace-builds/src-noconflict/mode-latex'\nimport 'ace-builds/src-noconflict/theme-github'\nimport './Editor.css'\n\nconst Editor: React.FC<{\n  code?: string\n  onChange?: (value: string, event?: any) => void\n}> = ({ code, onChange }) => {\n  const ref = useRef<HTMLDivElement>(null)\n  const [{ width, height }, setSize] = useState({\n    width: 0,\n    height: 0\n  })\n\n  useEffect(() => {\n    const resetSize = () => {\n      if (ref.current) {\n        const width = ref.current.offsetWidth\n        const height = ref.current.offsetHeight\n        setSize({ width, height })\n      }\n    }\n    resetSize()\n    window.addEventListener('resize', resetSize)\n    return () => window.removeEventListener('resize', resetSize)\n  }, [ref])\n\n  return (\n    <div className=\"Editor\">\n      <div ref={ref} className=\"Wrapper\">\n        <AceEditor\n          name=\"latex-input\"\n          placeholder=\"Enter LaTeX math code here...\"\n          theme=\"github\"\n          mode=\"latex\"\n          onChange={onChange}\n          fontSize={14}\n          showPrintMargin={false}\n          showGutter={false}\n          highlightActiveLine={false}\n          value={code}\n          width={`${width}px`}\n          height={`${height}px`}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default Editor\n","import { useState, useEffect } from 'react'\n\nconst useDebounced = function<T>(target: T, delay = 500): T {\n  const [value, setValue] = useState<T>(target)\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setValue(target)\n    }, delay)\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [target, delay])\n\n  return value\n}\n\nexport default useDebounced\n","import React from 'react'\n\nconst Fallback: React.FC = () => (\n  <div className=\"Fallback\">Invalid LaTeX Code</div>\n)\n\nexport default Fallback\n","import React, { useState, useLayoutEffect } from 'react'\nimport useDebounced from '../../hooks/useDebounced'\nimport addTextToClipboard from '../../common/addTextToClipboard'\nimport './Display.css'\nimport Fallback from './Fallback'\n\n/**\n * When given LaTeX math code, will fetch the rendered image from github's API\n * and display it.\n */\nconst Display: React.FC<{ url: string }> = ({ url }) => {\n  const [error, setError] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const debouncedUrl = useDebounced(url)\n\n  useLayoutEffect(() => {\n    setError(false)\n    setLoading(true)\n  }, [debouncedUrl])\n\n  return (\n    <div className={'Display' + (loading ? ' loading' : '')}>\n      {loading && <div className=\"Loading\">Loading...</div>}\n      {error ? (\n        <Fallback />\n      ) : (\n        <img\n          className=\"Image\"\n          title=\"Copy url to clipboard\"\n          src={debouncedUrl}\n          alt=\"Rendered LaTeX\"\n          onClick={() => {\n            // console.log(`I want to add ${url} to your keyboard.`)\n            addTextToClipboard(debouncedUrl)\n          }}\n          onError={() => {\n            setError(true)\n            setLoading(false)\n          }}\n          onLoad={() => {\n            setLoading(false)\n          }}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default Display\n","import { useState, Dispatch, SetStateAction, useEffect } from 'react'\n\nconst getStorage = function<T>(key: string, defaultValue: T) {\n  const result = window.localStorage.getItem(key)\n  return result !== null ? JSON.parse(result) : defaultValue\n}\n\nconst updateStorage = function<T>(key: string, value: T) {\n  window.localStorage.setItem(key, JSON.stringify(value))\n}\n\n/**\n * Uses the [Web Storage\n * API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API) to\n * keep the state persistent.\n *\n * @param key\n * @param fallbackState\n */\nconst usePersistentState = function<T>(\n  key: string,\n  fallbackState: T\n): [T, Dispatch<SetStateAction<T>>] {\n  const [state, setState] = useState<T>(getStorage(key, fallbackState))\n\n  useEffect(() => {\n    updateStorage(key, state)\n  }, [key, state])\n\n  return [state, setState]\n}\n\nexport default usePersistentState\n","import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\nimport addTextToClipboard from './common/addTextToClipboard'\nimport LaTeXEditor from './components/Editor'\nimport Display from './components/Display'\nimport './index.css'\nimport usePersistentState from './hooks/usePersistentState'\n\nconst defaultCode = `\\\\begin{split}\n    2^{n\\\\cdot k} &= (1 + (2^n - 1))^k \\\\\\\\\n    &\\\\equiv 1 \\\\mod 2^n - 1\n\\\\end{split}`\n\n/**\n * Takes raw latex code and encodes it into a url for Github's latex math\n * rendering API.\n *\n * @param code The raw latex code\n */\nconst encodeUrl = (code: string) => {\n  const baseUrl = 'https://render.githubusercontent.com/render/math?math='\n  return baseUrl + encodeURIComponent(code)\n}\n\nconst App: React.FC = () => {\n  // The default code is a simple mathematical fact\n  const [code, setCode] = usePersistentState('code', defaultCode)\n  const url = encodeUrl(code)\n\n  useEffect(() => {\n    const listener = (e: KeyboardEvent) => {\n      if (\n        e.key === 's' &&\n        e.getModifierState(\n          navigator.userAgent.indexOf('Mac OS X') !== -1 ? 'Meta' : 'Control'\n        )\n      ) {\n        e.preventDefault()\n        addTextToClipboard(url)\n      }\n    }\n    window.addEventListener('keydown', listener)\n    return () => {\n      window.removeEventListener('keydown', listener)\n    }\n  }, [url])\n\n  // const explanation = useMemo(() => {\n  //   if (window.innerWidth <= 800 || window.innerHeight <= 600) {\n  //     return\n  //   } else {\n  //     const key =\n  //       navigator.userAgent.indexOf('Mac OS X') !== -1 ? 'Command' : 'Ctrl'\n  //     return (\n  //       <h3>\n  //         Pressing <kbd>{key}</kbd> + <kbd>S</kbd> or clicking the preview image\n  //         will add the url to your clipboard.\n  //       </h3>\n  //     )\n  //   }\n  // }, [])\n\n  return (\n    <div className=\"App\">\n      <h1>Github Math</h1>\n      <LaTeXEditor\n        code={code}\n        onChange={value => {\n          setCode(value)\n        }}\n      />\n      <h3>Click the preview image to add the url to your clipboard.</h3>\n      <Display url={url} />\n    </div>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}